#!/usr/local/bin/perl
#
# SQLSYNC
#
# A tool to synchronize tables between SQL (MySQL) servers
#
# Copyright (c) 2023 Peter Eriksson <pen@lysator.liu.se>
#

use strict;
use warnings;

use utf8;
binmode STDIN,  ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

use PPL;
use Data::Dumper;
use Config::Tiny;
use Getopt::Std;

my $version = "1.3.0";


my $f_debug = 0;
my $f_ignore = 0;
my $f_verbose = 0;
my $f_update = 1;
my $f_delete = 1;
my $f_force = 0;
my $f_twoway = 0;
my $f_wlock = 0;
my $f_rlock = 0;

my $f_primary_key = 'id';
my $f_timestamp_key = 'updated';

my $db_src_uri = 'MariaDB://sqlsync@oldhost/somedatabase';
my $db_src_pwd = 'secret';

my $db_dst_uri = 'MariaDB://sqlsync@localhost/anotherdatabase';
my $db_dst_pwd = 'anothersecret';

my $f_cfgfile = '/usr/local/etc/sqlsync.ini';

my @tables   = ();
my @skiplist = ();

my $nw = 0;
my $ne = 0;
my $nt = 0;


sub parse_config {
    my ($path) = @_;
    
    my $cfg = Config::Tiny->read($path, 'utf8');
    return unless defined $cfg;
    
    if (defined $cfg->{_}) {
	my $s = $cfg->{_};
	
	@tables    = split(/,/, $s->{tables}) if defined $s->{tables};
	@skiplist  = split(/,/, $s->{skip})   if defined $s->{skip};
	
	$f_delete  = str2bool($s->{delete})   if defined $s->{delete};
	$f_verbose = str2bool($s->{verbose})  if defined $s->{verbose};
	$f_delete  = str2bool($s->{debug})    if defined $s->{debug};
	$f_ignore  = str2bool($s->{ignore})   if defined $s->{ignore};
	$f_update  = str2bool($s->{update})   if defined $s->{update};

    }
    
    if (defined $cfg->{keys}) {
	my $s = $cfg->{keys};
	
	$f_primary_key = $s->{primary} if defined $s->{primary};
	$f_timestamp_key = $s->{timestamp} if defined $s->{timestamp};
    }
    
    if (defined $cfg->{source}) {
	my $s = $cfg->{source};

	$db_src_uri = $s->{uri} if defined $s->{uri};
	$db_src_pwd = $s->{pwd} if defined $s->{pwd};
    }
    
    if (defined $cfg->{target}) {
	my $s = $cfg->{target};
	
	$db_dst_uri = $s->{uri} if defined $s->{uri};
	$db_dst_pwd = $s->{pwd} if defined $s->{pwd};
    }
}


my %opts;
getopts("hvixdnfwr2V:D:C:S:K:T:", \%opts);
if (defined $opts{h}) {
    print "Usage:\n";
    print "  $0 [<options>]\n\n";
    print "Options:\n";
    print "  -h           Display this information\n";
    print "  -v           Be verbose\n";
    print "  -i           Ignore errors\n";
    print "  -x           No delete of expunged records\n";
    print "  -n           No updates mode\n";
    print "  -f           Force updates mode\n";
    print "  -2           Enable partial (only updates) twoway-sync mode\n";
    print "  -w           Write-lock target table\n";
    print "  -r           Read-lock source table\n";
    print "  -d           Enable debug output\n";
    print "  -K <key>     Primary key [${f_primary_key}]\n";
    print "  -T <key>     Timestamp key [${f_timestamp_key}]\n";
    print "  -V <level>   Force verbosity level\n";
    print "  -D <level>   Force debug level\n";
    print "  -C <path>    Config file\n";
    print "  -S <list>    Comma-separated list of tables to skip\n";
    exit 0;
}

$f_debug = $opts{D} if defined $opts{D};
$f_debug++ if defined $opts{d};

parse_config($f_cfgfile);
parse_config($opts{C}) if defined $opts{C};

$f_ignore = 1  if defined $opts{i};
$f_force = 1   if defined $opts{f};
$f_twoway = 1  if defined $opts{'2'};
$f_wlock = 1   if defined $opts{w};
$f_rlock = 1   if defined $opts{r};
$f_update = 0  if defined $opts{n};
$f_delete = 0  if defined $opts{x};

$f_verbose = $opts{V} if defined $opts{V};
$f_verbose++ if defined $opts{v};

$f_primary_key = $opts{K} if defined $opts{K};
undef $f_primary_key if $f_primary_key eq '-' || $f_primary_key eq '';

$f_timestamp_key = $opts{T} if defined $opts{T};
undef $f_timestamp_key if $f_timestamp_key eq '-' || $f_timestamp_key eq '';


@skiplist = split(/,/, $opts{S}) if defined $opts{S};

    
my $spin_timestamp = time;
my $spin_state = 0;
my @spin_dials = ( '|', '/', '-', '\\' );

sub spin {
    my $c = shift;
    
    if ($spin_timestamp != time) {
	$spin_timestamp = time;

	if ($f_verbose == 1) {
	    my $d = ${spin_dials[$spin_state]};
	    print STDERR "$d\b";
	    $spin_state++;
	    $spin_state = 0 if $spin_state > 3;
	} else {
	    print STDERR "$c\r";
	}
    }
}



my $db_src = sql_connect($db_src_uri, $db_src_pwd);
if (!defined $db_src) {
    my $err = sql_error($db_src);
    print STDERR "$0: Error: ${err}: Connecting to source database: ${db_src_uri}\n";
    exit 1;
}

my $src_dbname = $1 if $db_src_uri =~ /\/([^\/]+)$/;

my $db_dst = sql_connect($db_dst_uri, $db_dst_pwd);
if (!defined $db_dst) {
    my $err = sql_error($db_dst);
    print STDERR "$0: Error: ${err}: Connecting to source database: ${db_dst_uri}\n";
    exit 1;
}


sub p_row {
    my ($t, $d) = @_;
    
    my $s = "#$d->{${f_primary_key}} @ $t";
    if (defined $d->{name} || defined $d->{mac}) {
	$s .= ' [';
	$s .= " name=$d->{name}" if defined $d->{name};
	$s .= " mac=$d->{mac}" if defined $d->{mac};
	$s .= ' ]';
    }
    return $s;
}

sub sql_sync_table {
    my ($db_source, $db_target, $tn) = @_;

    print "[${tn}]\n" if $f_verbose;

    my $nc = 0;
    my $ni = 0;
    my $nu = 0;
    my $nd = 0;
    my $ns = 0;

    if ($f_rlock) {
	if (!sql($db_source, "LOCK TABLES ${tn} READ")) {
	    my $err = sql_error($db_source);
	    print STDERR "$0: Error: ${err}: Unable to read-lock source database table\n";
	    $ne++;
            return if $f_ignore;
            exit 1;
	}
    }

    my $ddvh = sql_h($db_target, "SELECT * FROM $tn");
    if (!defined $ddvh) {
	my $err = sql_error($db_target);
	print STDERR "$0: Error: ${err}: Target database\n";
	$ne++;
	return if $f_ignore;
	exit 1;
    }

    spin(0) if -t STDERR;

    my $ddh;
    foreach my $dd (@$ddvh) {
	$ddh->{$dd->{${f_primary_key}}} = $dd;
    }

    my $sdvh = sql_h($db_source, "SELECT * FROM $tn");
    if (!defined $sdvh) {
	my $err = sql_error($db_source);
	print STDERR "$0: Error: ${err}: $tn: Source table\n";
	$ne++;
	return if $f_ignore;
	exit 1;
    }

    my $sdh;
    foreach my $sd (@$sdvh) {
	$sdh->{$sd->{${f_primary_key}}} = $sd;
    }

    if ($f_wlock) {
	if (!sql($db_target, "LOCK TABLES ${tn} WRITE")) {
	    my $err = sql_error($db_target);
	    print STDERR "$0: Error: ${err}: Unable to write-lock target database table\n";
	    $ne++;
            return if $f_ignore;
            exit 1;
	}
    } elsif ($f_rlock) {
	if (!sql($db_target, "UNLOCK TABLES")) {
	    my $err = sql_error($db_target);
	    print STDERR "$0: Error: ${err}: Unable to un-lock target database table\n";
	    $ne++;
            return if $f_ignore;
            exit 1;
	}
    }

    # Purge deleted records
    if ($f_delete) {
	foreach my $dd (@$ddvh) {
	    if (!defined $sdh->{$dd->{${f_primary_key}}}) {
		if ($f_update) {
		    if (!sql_delete($db_target, $tn, { id => $dd->{${f_primary_key}} })) {
			my $err = sql_error($db_target);
			$ne++;
			print STDERR "$0: Error: ${err}: While deleting ".p_row($tn, $dd)."\n";
			exit 1 unless $f_ignore;
		    } else {
			print p_row($tn, $dd).": Deleted\n" if $f_verbose > 1;
			$nd++;
		    }
		} else {
		    print p_row($tn, $dd).": (NOT) Deleted\n" if $f_verbose > 1;
		    $nd++;
		}
		delete $ddh->{$dd->{${f_primary_key}}};
	    }
	}
    }

    # Add new or Update changed records
    foreach my $sd (@$sdvh) {
	$nc++;
	spin($nc) if -t STDERR;
	
	my $dd = $ddh->{$sd->{${f_primary_key}}};

	foreach my $k (keys %$sd) {
	    my $v = $sd->{$k};
	    next unless defined $v;
	    if ($tn eq 'nodes_info' && "$v" eq '0000-00-00 00:00:00') {
		if (defined $f_timestamp_key && ($k eq $f_timestamp_key)) {
		    foreach my $kn (keys %$sd) {
			my $nv = $sd->{$kn};
			if (defined $nv && $nv =~ /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/) {
			    if (($v cmp $nv) < 0) {
				$sd->{$k} = $v = $nv;
			    }
			}
		    }
		    if ($v ne '0000-00-00 00:00:00') {
			print STDERR "$0: Notice: ".p_row($tn, $sd).": Using syntetic $v for timestamp key\n" if $f_verbose > 2;
		    }
		} else {
		    $sd->{$k} = undef;
		}
	    }
	}

	if (defined $f_timestamp_key &&
	    (!defined $sd->{$f_timestamp_key} || $sd->{$f_timestamp_key} eq '0000-00-00 00:00:00')) {
	    $ns++;
	    print STDERR "$0: Notice: ".p_row($tn, $sd).": Skipping due to invalid timestamp key: ".ps($sd->{$f_timestamp_key})."\n" if $f_verbose > 2;
	    next;
	}
	
	if (!defined $dd) {
	    if ($f_update) {
		if (!sql_insert($db_target, $tn, $sd)) {
		    my $err = sql_error($db_target);
		    print STDERR "$0: Error: ${err}: While adding ".p_row($tn, $sd)."\n";
		    $ne++;
		    next if $f_ignore;
		    exit 1;
		} else {
		    print p_row($tn, $sd).": Added\n" if $f_verbose > 1;
		}
	    } else {
		print p_row($tn, $sd).": (NOT) Added\n" if $f_verbose > 1;
	    }
	    $ni++;
	} else {
	    my $d;
	    if ($f_force) {
		$d = 1;
	    } elsif (defined $f_timestamp_key) {
		$d = $sd->{$f_timestamp_key} cmp $dd->{$f_timestamp_key};
	    } else {
		$d = !hash_equal($sd, $dd);
	    }
	    if ($d > 0 || (!$f_twoway && $d != 0)) {
		if ($f_update) {
		    if (!sql_update($db_target, $tn, $sd, { id => $sd->{${f_primary_key}} })) {
			my $err = sql_error($db_target);
			print STDERR "$0: Error: ${err}: While updating target ".p_row($tn, $sd)."\n";
			$ne++;
			next if $f_ignore;
			exit 1;
		    } else {
			print p_row($tn, $sd).": Updated\n" if $f_verbose > 1;
		    }
		} else {
		    print p_row($tn, $sd).": (NOT) Updated\n" if $f_verbose > 1;
		}
		$nu++;
	    } elsif ($d < 0) {
		if ($f_twoway) {
		    if ($f_update) {
			if (!sql_update($db_source, $tn, $dd, { id => $dd->{${f_primary_key}} })) {
			    my $err = sql_error($db_source);
			    print STDERR "$0: Error: ${err}: While updating source ".p_row($tn, $dd)."\n";
			    $ne++;
			    next if $f_ignore;
			    exit 1;
			} else {
			    print p_row($tn, $dd).": Updated [source]\n" if $f_verbose > 1;
			}
		    } else {
			print p_row($tn, $dd).": (NOT) Updated [source]\n" if $f_verbose > 1;
		    }
		    $nu++;
		} else {
		    print STDERR "$0: Warning: ".p_row($tn, $sd)." -> ".p_row($tn, $dd).": Target newer than source (ignored)\n";
		    $nw++;
		}
	    }
	}
    }

    if ($f_wlock || $f_rlock) {
	if (!sql($db_target, "UNLOCK TABLES")) {
	    my $err = sql_error($db_target);
	    print STDERR "$0: Error: ${err}: Unable to un-lock target database table\n";
	    $ne++;
            return if $f_ignore;
            exit 1;
	}
    }
    
    print "$nc scanned & $ns skipped -> $ni added, $nu updated, $nd deleted\n\n" if $f_verbose;
    $nt++;
}


print "[sqlsync ${version} - Copyright (c) Peter Eriksson <pen\@lysator.liu.se>]\n\n" if $f_verbose;

my $start = time;
@tables = @ARGV if 0 < @ARGV;

foreach my $tn (@tables) {
    if ($tn eq '*') {
	my @tv = sql($db_src, 'SHOW TABLES');
	foreach my $td (@tv) {
	    my $tn = $td->{"Tables_in_${src_dbname}"};

	    next if in_list($tn, @skiplist);
	    next if in_list($tn, @tables);
	    sql_sync_table($db_src, $db_dst, $tn);
	}
    } else {
	sql_sync_table($db_src, $db_dst, $tn);
    }
}

my $ts = time-$start;

print "[$nt table(s) scanned in ${ts} s -> $nw warning(s) & $ne error(s)]\n" if $f_verbose || $nw > 0 || $ne > 0;
exit 0;

